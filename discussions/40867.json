[
  {
    "Id": "135547",
    "ThreadId": "40867",
    "Html": "I am using my own collections (really C5 collections) that I have adapted to implement INotifyCollectionChanged. and I want to CLINQ it. I have mod'd my own version CLINQ and for obvious reasons I would rateher just use CLINQ.<br>\r\n<br>\r\nCan this be added to the basic extension methods ? <br>\r\n<br>\r\nMod'ing the 2 branch would be ideal - please :)<br>\r\n",
    "PostedDate": "2008-11-26T05:56:21.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154463",
    "ThreadId": "40867",
    "Html": "What would be most effective here would be a class in CLINQ that can take any <span style=\"text-decoration:underline\">generic</span> IEnumerable that implements INotifyCollectionChanged and turn it into one of its own ReadOnlyContinuousCollections. <br>\r\n<br>\r\nNow, there is a class in the source called PassThroughReadOnlyContinuousCollection that seems to get close to this concept, but the class is marked internal. And even then, the biggest hurdle to this idea is the IList&lt;T&gt; requirement placed on the ReadOnlyContinuousCollection, as opposed to accepting anything that is at least IEnumerable&lt;T&gt;. Since the System.Core assembly is required to make this project work, the normal System.Linq.Enumerable functions can be used to implement some of the basic IList&lt;T&gt; methods, like Contains and the indexer (using ElementAt).<br>\r\n<br>\r\nAnd if that doesn't work, it shouldn't be much trouble to implement runtime type checking using reflection to discover if a collection passed in is an IEnumerable&lt;T&gt;, an ICollection&lt;T&gt; or an IList&lt;T&gt;. CLINQ could then implement the IList&lt;T&gt; functions based on what functions are already available in the source.<br>\r\n<br>\r\n(By the way, I wish C5 would use INotifyCollectionChanged now since we have .NET 3.5. It's *so* useful...)<br>\r\n",
    "PostedDate": "2009-02-04T15:18:16.367-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "167827",
    "ThreadId": "40867",
    "Html": "This is a good idea, and will cut down on the ridiculous amount of extension methods that we have to define/repeat.&nbsp; The best route is probably to go off IList&lt;T&gt; as we only work with indexed collections.&nbsp; (Some kind of ObservableDictionary would be nice someday too.)&nbsp; It would be a runtime check, which isn't the end of the world.&nbsp; <br>\r\n<br>\r\nI'll add this today if I can, and thanks for the suggestion.<br>\r\n",
    "PostedDate": "2009-03-13T10:34:49.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "169524",
    "ThreadId": "40867",
    "Html": "Actually this can cause some problems.&nbsp; If there is a file that contains standard linq queries on things like List&lt;T&gt;, then those queries will be turned into clinq queries, or there will be ambiguity. This is going to require more thought unfortunately.<br>\r\n",
    "PostedDate": "2009-03-18T11:36:12.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "169527",
    "ThreadId": "40867",
    "Html": "You might just have to dispense with the extension syntax and call the System.Linq.Enumerable methods like any other normal static method when you need them. Then it only comes down to excluding &quot;using System.Linq&quot; statements. Ambiguities solved.<br>\r\n",
    "PostedDate": "2009-03-18T11:44:25.1-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215745",
    "ThreadId": "40867",
    "Html": "<p>I'm interested in the same functionality.&nbsp; I would even be happy if ReadOnlyContinuousCollection was an interface.&nbsp; Or rather, extract an interface from that class and add the extension method support for it.&nbsp; I've made some progress in this direction in my own copy of ContinuousLinq.&nbsp; I'd be happy to contribute back to the project.</p>",
    "PostedDate": "2009-07-24T07:29:49.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]