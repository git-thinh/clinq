[
  {
    "Id": "260667",
    "ThreadId": "76230",
    "Html": "<p>I'm curious if you could quantify the improvements that are achieved when DoesEntireTreeSupportINotifyPropertyChanging is true.</p>\r\n<p>Also, what would the impact of a false positive be as in&nbsp;</p>\r\n<p>string property { get {} set { NotifyChanging(&quot;property&quot;); if(value == &quot;bad&quot;) return; _property = value; NotifyChanged(&quot;property&quot;); }</p>\r\n<p>I ask because I'm using LLBLGen as my OR/M and it does a lot of validation of properties. &nbsp;It also support rolling back individual properties. &nbsp;Adding Changing support seems to be a bit outside feasibility, so I wanted to know what I'm missing out on.</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2009-11-25T09:11:31.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "267563",
    "ThreadId": "76230",
    "Html": "<p>Sorry for the late reply, I was on vacation, and I don't get notification when people post to the forum.&nbsp;</p>\r\n<p>In a nutshell, CLINQ must subscribe to a tree of objects in order to do it's magic.&nbsp; For example:</p>\r\n<p>var peopleWithBrothersOver20 = from person in people where person.Brother.Age &gt; 20 select person</p>\r\n<p>For each person in the people collection, I need subscribe to that person's PropertyChanged event.&nbsp; I'm also looking at each person's brother property, and the age of that person's brother.&nbsp; When any of these properties change, I need to reevaluate the filter to determine if the output of the collection needs to be updated.&nbsp; So this means that I need subscribe to person.PropertyChanged, person.Brother.PropertyChanged.&nbsp; Now that's easy enough to do.&nbsp; However, let's say the person.Brother gets replaced with a new object.&nbsp; I need to unsubscribe from the old person.Brother.PropertyChanged.&nbsp; INotifyPropertyChanging tells me the property is changing, so I can examine the value of person.Brother before it changes, and so it's easy enough to unsubscribe from person.Brother because the value of the property has not been updated to the new value yet.&nbsp;</p>\r\n<p>Now, without INotifyPropertyChanging, I still have to unsubscribe from the old person.Brother.&nbsp; How to do that?&nbsp; Well, I need to basically keep a copy of the object tree for each object in each query.&nbsp; This requires a ton of memory, and of course increases heap fragmentation, cache mises, etc.&nbsp; The apps I work that utilize CLINQ have over 100 queries and in some cases monitor collections of 3.5 million objects.&nbsp; The INotifyPropertyChanging optimization becomes very important, as now a subscription only stores two or three references to other objects and a couple entries in a hashtable.&nbsp;</p>\r\n<p>Also, if you are using ReactiveObject, which also a corner stone (not enough people use it btw.) In one of our apps, we have over 1000 reactive definitions. The monitoring of those properties also benefits from this optimization.</p>\r\n<p>I hope this answers your questions, and please do not hesitate to ask more questions.</p>\r\n<p>Thanks,</p>\r\n<p>Andy</p>",
    "PostedDate": "2009-12-15T06:45:24.413-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "267611",
    "ThreadId": "76230",
    "Html": "<p>The object I'm wanting to monitor is an Entity generated by LLBLGen Pro. &nbsp;I'd contacted them asking about the feasibility of implementing INotifyPropertyChanging. &nbsp;The two questions were &quot;What good is it?&quot; (which you've answered nicely) and &quot;What about validation in setters?&quot; &nbsp;In this case, there are a number of opportunities for the set to be cancelled. &nbsp;What happens if I notify changing, but never change?</p>\r\n<p>Our discussion is here (not sure if this is publicly available or if you need a login): <a href=\"http://www.llblgen.com/TinyForum/Messages.aspx?ThreadID=16967\">http://www.llblgen.com/TinyForum/Messages.aspx?ThreadID=16967</a></p>\r\n<p>FWIW, I use RSS to monitor these discussions.</p>",
    "PostedDate": "2009-12-15T08:46:48.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]