[
  {
    "Id": "464340",
    "ThreadId": "218627",
    "Html": "<p>Make sure that all objects in your &quot;OnChanged()&quot; expression implement INotifyPropertyChanged.</p>\r\n<p>While it may seem obvious, it threw me for a loop. When using a ReactiveObject that registers dependencies, make sure that the objects in the &quot;OnChanged(...)&quot; expression all implement INotifyPropertyChanged. If not, your expression tree won't call the callback that you define in the &quot;Call(...)&quot; portion of the dependency.</p>\r\n<p>In my case, my expression included a set of objects that all implemented INPC, but one of the objects in the expression was being accessed via an interface. The interface did not&nbsp;implement INotifyPropertyChanged, even though the concrete class did. As a result, the code in ContinuousLinq.ExpressionPropertyAnalyzer.ApplyTypeFilter() removed that node from the subscription. The net result was that my callback wasn't called.</p>\r\n<p>It might be nice to have the option to see these issues rendered in the Debug window, or even issue a Debug ASSERT so that we can easily catch these scenarios. This one took me a while to track down by stepping through the CLINQ codebase.</p>\r\n<p>&nbsp;</p>\r\n<p>Example:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> ContinuousLinq.Reactive;\r\n<span style=\"color:blue\">using</span> System.ComponentModel;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n\r\n<span style=\"color:blue\">namespace</span> ClinqTest\r\n{\r\n    <span style=\"color:blue\">class</span> Program\r\n    {\r\n\r\n        <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args)\r\n        {\r\n            <span style=\"color:blue\">var</span> a = <span style=\"color:blue\">new</span> A();\r\n\r\n            Console.WriteLine();\r\n            Console.WriteLine(<span style=\"color:#a31515\">&quot;Changing value - INTERFACE based expression.&quot;</span>);\r\n            \r\n            <span style=\"color:green\">// This line should result in a Console.Writeline(...), but won't,</span>\r\n            <span style=\"color:green\">// unless you make IInterfaceB implement INotifyPropertyChanged.</span>\r\n            a.PropBInterface.PropC.PropOfC = <span style=\"color:#a31515\">&quot;New Value (via Interface expression)&quot;</span>;\r\n\r\n            Console.WriteLine(<span style=\"color:#a31515\">&quot;Changed value - INTERFACE based expression.&quot;</span>);\r\n\r\n            Console.WriteLine();\r\n            Console.WriteLine(<span style=\"color:#a31515\">&quot;Press any key to exit.&quot;</span>);\r\n            Console.ReadKey();\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">interface</span> IInterfaceB\r\n            <span style=\"color:green\">// FIX: Uncomment the following line to fix it.</span>\r\n            <span style=\"color:green\">// : INotifyPropertyChanged    </span>\r\n        {\r\n            C PropC { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        }\r\n\r\n        \r\n        <span style=\"color:blue\">class</span> A : ReactiveObject, INotifyPropertyChanged\r\n        {\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">new</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n            <span style=\"color:blue\">static</span> A()\r\n            {\r\n                <span style=\"color:blue\">var</span> dependsOn = Register&lt;A&gt;();\r\n                dependsOn\r\n                    .Call(me =&gt; \r\n                        Console.WriteLine(\r\n                            <span style=\"color:#a31515\">&quot;C.PropOfC Changed (Interface). Value = '{0}'.&quot;</span>,\r\n                            <span style=\"color:blue\">new</span> <span style=\"color:blue\">string</span>[] { me.PropBInterface.PropC.PropOfC })\r\n                        )\r\n                    .OnChanged(me =&gt; me.PropBInterface.PropC.PropOfC);\r\n\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> A()\r\n                : <span style=\"color:blue\">base</span>()\r\n            {\r\n                PropBInterface = <span style=\"color:blue\">new</span> B();\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> B _B;\r\n            <span style=\"color:blue\">public</span> IInterfaceB PropBInterface\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _B; }\r\n                <span style=\"color:blue\">set</span> { _B = (B)value; OnPropertyChanged(<span style=\"color:#a31515\">&quot;PropBInterface&quot;</span>); }\r\n            }\r\n\r\n            <span style=\"color:blue\">internal</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propertyName)\r\n            {\r\n                <span style=\"color:blue\">if</span> (PropertyChanged == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n                PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">class</span> B : IInterfaceB, INotifyPropertyChanged\r\n        {\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n            <span style=\"color:blue\">public</span> B()\r\n            {\r\n                PropC = <span style=\"color:blue\">new</span> C();\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> C _C;\r\n            <span style=\"color:blue\">public</span> C PropC\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _C; }\r\n                <span style=\"color:blue\">set</span> { _C = value; OnPropertyChanged(<span style=\"color:#a31515\">&quot;PropC&quot;</span>); }\r\n            }\r\n\r\n            <span style=\"color:blue\">internal</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propertyName)\r\n            {\r\n                <span style=\"color:blue\">if</span> (PropertyChanged == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n                PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">class</span> C : INotifyPropertyChanged\r\n        {\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _PropOfC;\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> PropOfC\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _PropOfC; }\r\n                <span style=\"color:blue\">set</span> { _PropOfC = value; OnPropertyChanged(<span style=\"color:#a31515\">&quot;PropOfC&quot;</span>); }\r\n            }\r\n\r\n            <span style=\"color:blue\">internal</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propertyName)\r\n            {\r\n                <span style=\"color:blue\">if</span> (PropertyChanged == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n                PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2010-07-07T08:35:30.277-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "464381",
    "ThreadId": "218627",
    "Html": "<p>Here is a sample tweak that helped me check if any of my types were missing INotifyPropertyChanged.</p>\r\n<p><em>Note:</em><br><em>This is just an idea, and has not been fully tested or reviewed for correctness. It worked for me during my dev phase.</em></p>\r\n<p>File: Expressions\\ExpressionPropertyAnalyzer.cs</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> DoesTypeImplementINotifyPropertyChanged(Type type)\r\n        {\r\n            <span style=\"color:blue\">var</span> ret = <span style=\"color:blue\">typeof</span>(INotifyPropertyChanged).IsAssignableFrom(type);\r\n\r\n            <span style=\"color:blue\">if</span> (!ret)\r\n                System.Diagnostics.Debug.WriteLine(<span style=\"color:#a31515\">&quot;CLINQ: Type does not implement INotifyPropertyChanged and will be removed from the expression evaluation. Type = {0}, Assembly={1}.&quot;</span>, type.FullName, type.Assembly.FullName);\r\n\r\n            <span style=\"color:blue\">return</span> ret;\r\n        }</pre>\r\n</div>",
    "PostedDate": "2010-07-07T09:47:05.053-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]