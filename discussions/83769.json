[
  {
    "Id": "287676",
    "ThreadId": "83769",
    "Html": "<p>Hello,</p>\r\n<p>&nbsp;</p>\r\n<p>I have mentioned that i can only use 'Where' on a collection when the children implement INotifyPropertyChanged.</p>\r\n<p>In my scenario i have a ReadOnlyObservableCollection. The children of this collection have some properties. This properties can only be set in the constructor and NEVER change.</p>\r\n<p>Thats why they dont implement INotifyPropertyChanged. Without this interface i cannot use CLINQs Where-Method. But CLINQ would be very usefull in this scenario because my collection is continously adding and removing items.</p>\r\n<p>My CLINQ-query would look like this:</p>\r\n<p>var query = from obj in myReadOnlyObsCol where obj.Value &lt;=  otherObject.MaxValue orderby obj.Value;</p>\r\n<p>The obj.Value-Property is fixed. But the otherObject is implementing INotifyPropertyChanged because its MaxValue-Property is updating sometimes.</p>\r\n<p>I can not use a CollectionViewSource because the Filter-Event is not fired everytime when otherObject.MaxValue is changing. I would have to call refresh() all the time manually.</p>\r\n<p>&nbsp;</p>\r\n<p>As a temporary workaround im goint to implement INotifyPropertyChanged in my class anyway. But i dont like implementing useless event that get never fired...</p>\r\n<p>It would be very usefull if you could make Where() and the othe Methods also be callable for types that does not implement PropertyChanged. Maybe you can check if the interface is implemented and if not you just dont register a PropertyChanged-Handler and always work with the current value.</p>\r\n<p>Greetings,</p>\r\n<p>&nbsp;</p>\r\n<p>Lector</p>",
    "PostedDate": "2010-02-09T07:26:10.423-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "569861",
    "ThreadId": "83769",
    "Html": "<p>Hello Lector,</p>\r\n<p>i have got the same problem.</p>\r\n<p>i made a small research and it seems that changing the objects used in the where-clause does not end with an Updating of the list as suspected</p>\r\n<p>i made a small wpf application that demonstrates this. its a WPF App.</p>\r\n<p>does anyone know if Clinq will get developed any further to support such scenarios ??</p>\r\n<p>MainWindow.xaml.cs</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.Linq;\r\n<span style=\"color: blue;\">using</span> System.Text;\r\n<span style=\"color: blue;\">using</span> System.Windows;\r\n<span style=\"color: blue;\">using</span> System.Windows.Controls;\r\n<span style=\"color: blue;\">using</span> System.Windows.Data;\r\n<span style=\"color: blue;\">using</span> System.Windows.Documents;\r\n<span style=\"color: blue;\">using</span> System.Windows.Input;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media.Imaging;\r\n<span style=\"color: blue;\">using</span> System.Windows.Navigation;\r\n<span style=\"color: blue;\">using</span> System.Windows.Shapes;\r\n<span style=\"color: blue;\">using</span> System.ComponentModel;\r\n<span style=\"color: blue;\">using</span> ContinuousLinq;\r\n\r\n<span style=\"color: blue;\">namespace</span> ClinqTest\r\n{\r\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Interaction logic for MainWindow.xaml</span>\r\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> MainWindow : Window\r\n    {\r\n        System.Collections.ObjectModel.ObservableCollection&lt;Cow&gt; cowList =\r\n                <span style=\"color: blue;\">new</span> System.Collections.ObjectModel.ObservableCollection&lt;Cow&gt;();\r\n\r\n\r\n        <span style=\"color: blue;\">public</span> Cow CompareCow { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\r\n        <span style=\"color: blue;\">public</span> IEnumerable&lt;Cow&gt; CowList\r\n        {\r\n            <span style=\"color: blue;\">get</span>\r\n            {\r\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">from</span> x <span style=\"color: blue;\">in</span> cowList <span style=\"color: blue;\">where</span> CompareCow == <span style=\"color: blue;\">null</span> || x.Name == CompareCow.Name <span style=\"color: blue;\">select</span> x;\r\n            }\r\n        }\r\n                \r\n        <span style=\"color: blue;\">public</span> MainWindow()\r\n        {\r\n            CompareCow = <span style=\"color: blue;\">new</span> Cow(<span style=\"color: #a31515;\">\"Hansi\"</span>);\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Button_Click(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            cowList.Add(<span style=\"color: blue;\">new</span> Cow(newCowsName.Text));\r\n        }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> Cow : INotifyPropertyChanged\r\n    {\r\n        <span style=\"color: blue;\">public</span> Cow(<span style=\"color: blue;\">string</span> name)\r\n        {\r\n            m_name = name;\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">string</span> m_name;\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> Name\r\n        {\r\n            <span style=\"color: blue;\">get</span>\r\n            {\r\n                <span style=\"color: blue;\">return</span> m_name;\r\n            }\r\n\r\n            <span style=\"color: blue;\">set</span>\r\n            {\r\n                m_name = value;\r\n                <span style=\"color: blue;\">if</span> (PropertyChanged != <span style=\"color: blue;\">null</span>)\r\n                {\r\n                    PropertyChanged(<span style=\"color: blue;\">this</span>, <span style=\"color: blue;\">new</span> PropertyChangedEventArgs(<span style=\"color: #a31515;\">\"Name\"</span>));\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">string</span> ToString()\r\n        {\r\n            <span style=\"color: blue;\">return</span> Name;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>MainWindow.xaml</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Window</span> <span style=\"color: red;\">x:Class</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">ClinqTest.MainWindow</span><span style=\"color: black;\">\"</span>\r\n        <span style=\"color: red;\">xmlns</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color: black;\">\"</span>\r\n        <span style=\"color: red;\">xmlns:x</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color: black;\">\"</span>\r\n        <span style=\"color: red;\">Title</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">MainWindow</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Height</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">350</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Width</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">525</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">self</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">StackPanel</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ListBox</span> <span style=\"color: red;\">Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">listBox</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">ItemsSource</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding ElementName=self, Path=CowList}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">TextBox</span> <span style=\"color: red;\">Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">newCowsName</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Button</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Add Cow</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Click</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Button_Click</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">TextBlock</span><span style=\"color: blue;\">&gt;</span>Filter this cow name<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">TextBlock</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">TextBox</span> <span style=\"color: red;\">Text</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding ElementName=self,Path=CompareCow.Name}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">StackPanel</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Window</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-02-21T14:28:27.093-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]